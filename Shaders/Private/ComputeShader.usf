#include "/Engine/Private/Common.ush"

//This struct needs to match struct FWeatherXYPointState in ComputeShaderFrontEnd.h
struct TArray_FStruct_Shader_GPU{
	int runCount;
};

//Bound and declared in ComputeShaderDeclarations.cpp @FGlobalComputeShader (Initializer)
//Then is filled in before use in ComputeShaderFrontEnd.cpp @ExecuteInRenderThread
RWStructuredBuffer<TArray_FStruct_Shader_GPU> TArray_Struct_Parameter_GPU;
Texture2D<float> InputSurfaceCS;
RWTexture2D<float> OutputSurface_Parameter_GPU;

//each x,y,z of numthreads is multiplied by the respective DispatchShader x,y,z
//So for 1024x1024 threads, we could do:
//DispatchShader (32,32,1) in cpp
//numthreads(32,32,1) in usf
//equals (1024,1024,1)!
//Then you can just use ThreadId.xy for each pixel without fancy math (using a 1024x1024 texture)

[numthreads(256, 1, 1)]
//If using more than 1,1,1, threads:
//Be aware that parrellel thread are running, make sure that no thread can stomp on another threads calculations by
//writing to the same buffer/texture point
void VS_test(uint3 ThreadId : SV_DispatchThreadID)
{
    //Be aware that it may be faster to copy buffer data to a local variable here, as local memory is faster than buffer memory
    //So for huge datasets with massive random read/write, its better to do this locally, and just copy it back when done.
    TArray_Struct_Parameter_GPU[ThreadId.x].runCount = TArray_Struct_Parameter_GPU[ThreadId.x].runCount + 1;
} 


//Multiplatform notes:
//Differences between different graphics APIs:
//For example, Metal won't support more than 256 threads per axis. While DX10 standard supports 1024. 
//Android API won't let you use more than 4 buffers per kernel. While DX10 allows 8, DX11 - even more.
